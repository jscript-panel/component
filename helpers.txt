function pos2vol(pos) {
	return Math.max(-100, 10 * Math.log(pos) / Math.LN2);
}

function vol2pos(v) {
	return Math.pow(2, v / 10);
}

function Point2Pixel(pt, dpi) {
	return (pt * dpi / 72);
}

function RGB(r, g, b) {
	return (0xff000000 | (r << 16) | (g << 8) | (b));
}

function RGBA(r, g, b, a) {
	return ((a << 24) | (r << 16) | (g << 8) | (b));
}

function toRGB(col) {
	var a = col - 0xFF000000;
	return [a >> 16, a >> 8 & 0xFF, a & 0xFF];
}

function getAlpha(colour) {
	return ((colour >> 24) & 0xff);
}

function getRed(colour) {
	return ((colour >> 16) & 0xff);
}

function getGreen(colour) {
	return ((colour >> 8) & 0xff);
}

function getBlue(colour) {
	return (colour & 0xff);
}

function setAlpha(colour, a) {
	return ((colour & 0x00ffffff) | (a << 24));
}

function setRed(colour, r) {
	return ((colour & 0xff00ffff) | (r << 16));
}

function setGreen(colour, g) {
	return ((colour & 0xffff00ff) | (g << 8));
}

function setBlue(colour, b) {
	return ((colour & 0xffffff00) | b);
}

function blendColours(c1, c2, factor) {
	var c1 = toRGB(c1);
	var c2 = toRGB(c2);
	var r = Math.round(c1[0] + factor * (c2[0] - c1[0]));
	var g = Math.round(c1[1] + factor * (c2[1] - c1[1]));
	var b = Math.round(c1[2] + factor * (c2[2] - c1[2]));
	return (0xff000000 | (r << 16) | (g << 8) | (b));
}

// Lunminance and DetermineTextColour are based on code from the foobar2000 SDK.
function Luminance(colour) {
	var r = getRed(colour);
	var g = getGreen(colour)
	var b = getBlue(colour);
	return (0.2126 * r + 0.7152 * g + 0.0722 * b) / 255.0;
}

function DetermineTextColour(background) {
	if (Luminance(background) > 0.6) {
		return RGB(0, 0, 0);
	}
	return RGB(255, 255, 255);
}

function StripCode(text, chr) {
	if (!text) return '';
	if (text.indexOf(chr) == -1) return text;

	var arr = text.split(chr);
	var str = text.indexOf(chr) == 0 ? '' : arr[0];
	arr.shift();
	for (var i = 0; i < arr.length; i += 2) {
		str += arr[i + 1];
	}
	return str;
}

function StripCodes(text) {
	text = StripCode(text, chars.etx); // $rgb
	text = StripCode(text, chars.bel); // $font
	return text;
}

// fixed line width of 1px
function DrawRectangle(gr, x, y, w, h, colour) {
	gr.DrawRectangle(Math.floor(x) + 0.5, Math.floor(y) + 0.5, w, h, 1, colour);
}

// Simplified 2 colour helper
function FillGradientRectangle(gr, x, y, w, h, direction, colour1, colour2) {
	var stops = [[0, colour1], [1, colour2]];
	var brush = {Start : [0, 0], Stops: stops};
	if (direction == 0) brush.End = [0, h];
	else brush.End = [w, 0];
	gr.FillRectangle(x, y, w, h, JSON.stringify(brush));
}

function EnableMenuIf(condition) {
	return condition ? MF_STRING : MF_GRAYED;
}

function CheckMenuIf(condition) {
	var flags = MF_STRING;
	if (condition) flags |= MF_CHECKED;
	return flags;
}

function GetMenuFlags(enabled, checked) {
	var flags = enabled ? MF_STRING : MF_GRAYED;
	if (checked) flags |= MF_CHECKED;
	return flags;
}

// Simplified helper, more info here: https://jscript-panel.github.io/docs/fonts/
function CreateFontString(name, size, bold) {
	return JSON.stringify({
		Name : name,
		Size : Math.round(size * DPI / 72),
		Weight : bold ? DWRITE_FONT_WEIGHT_BOLD : DWRITE_FONT_WEIGHT_NORMAL
	});
}

function GetNowPlayingColours() {
	var metadb = fb.GetNowPlaying();
	if (metadb) {
		var img = metadb.GetAlbumArt(AlbumArtId.front, false); // 2nd arg is want_stub - we don't
		if (img) {
			var extracted_colours = img.GetColourScheme(10).toArray().map(function (item) {
				return {
					colour: item,
					luminance: Luminance(item),
				};
			});

			img.Dispose();

			var background_colour = extracted_colours[0].colour;
			var text_colour = DetermineTextColour(background_colour);

			// extreme edge case where image is solid :/
			if (extracted_colours.length == 1) {
				// invert
				var selected_background_colour = text_colour;
				var selected_text_colour = background_colour;
			} else {
				var l = extracted_colours[0].luminance;
				extracted_colours.pop();

				var diff = 0;
				var idx = 0;
				extracted_colours.forEach(function (item, i) {
					var tmp = Math.abs(l - item.luminance);
					if (tmp > diff) {
						diff = tmp;
						idx = i;
					}
				});

				var selected_background_colour = extracted_colours[idx].colour;
				var selected_text_colour = DetermineTextColour(selected_background_colour);
			}
			return [background_colour, text_colour, selected_background_colour, selected_text_colour];
		}
	}
	return [];
}

function playlist_can_add_items(playlistIndex) {
	return !(plman.GetPlaylistLockFilterMask(playlistIndex) & PlaylistLockFilterMask.filter_add);
}

function playlist_can_remove_items(playlistIndex) {
	return !(plman.GetPlaylistLockFilterMask(playlistIndex) & PlaylistLockFilterMask.filter_remove);
}

function playlist_can_reorder(playlistIndex) {
	return !(plman.GetPlaylistLockFilterMask(playlistIndex) & PlaylistLockFilterMask.filter_reorder);
}

function playlist_can_replace_items(playlistIndex) {
	return !(plman.GetPlaylistLockFilterMask(playlistIndex) & PlaylistLockFilterMask.filter_replace);
}

function playlist_can_rename(playlistIndex) {
	return !(plman.GetPlaylistLockFilterMask(playlistIndex) & PlaylistLockFilterMask.filter_rename);
}

function playlist_can_remove(playlistIndex) {
	return !(plman.GetPlaylistLockFilterMask(playlistIndex) & PlaylistLockFilterMask.filter_remove_playlist);
}

var chars = {
	check_on : '\ue73a',
	check_off : '\ue739',
	heart_on : '\ueb52',
	heart_off : '\ueb51',
	radio_on : '\ueccb',
	radio_off : '\uecca',
	rating_on : '\ue735',
	rating_off : '\ue734',
	list : '\uea37',
	lock : '\ue72e',
	working : '\ue916',
	up : '\ue70e',
	down : '\ue70d',
	left : '\ue76b',
	right : '\ue76c',
	close : '\uef2c',
	stop : '\uE71A',
	prev : '\uE892',
	play : '\uE768',
	pause : '\uE769',
	next : '\uE893',
	search : '\uE721',
	preferences : '\uE713',
	menu : '\ue700',
	music : '\uec4f',
	volume : '\ue767',
	repeat_all : '\ue8ee',
	repeat_one : '\ue8ed',
	repeat_off : '\uf5e7',
	shuffle : '\ue8b1',
	random : '\ue9ce',
	album : '\ue93c',
	folder : '\ued25',
// Ignore these, they are special chars for $rgb and $font parsing
	etx : String.fromCharCode(3),
	bel : String.fromCharCode(7),
	tab : '\t',
};

var DWRITE_FONT_WEIGHT_THIN = 100;
var DWRITE_FONT_WEIGHT_EXTRA_LIGHT = 200;
var DWRITE_FONT_WEIGHT_ULTRA_LIGHT = 200;
var DWRITE_FONT_WEIGHT_LIGHT = 300;
var DWRITE_FONT_WEIGHT_SEMI_LIGHT = 350;
var DWRITE_FONT_WEIGHT_NORMAL = 400;
var DWRITE_FONT_WEIGHT_REGULAR = 400;
var DWRITE_FONT_WEIGHT_MEDIUM = 500;
var DWRITE_FONT_WEIGHT_DEMI_BOLD = 600;
var DWRITE_FONT_WEIGHT_SEMI_BOLD = 600;
var DWRITE_FONT_WEIGHT_BOLD = 700;
var DWRITE_FONT_WEIGHT_EXTRA_BOLD = 800;
var DWRITE_FONT_WEIGHT_ULTRA_BOLD = 800;
var DWRITE_FONT_WEIGHT_BLACK = 900;
var DWRITE_FONT_WEIGHT_HEAVY = 900;
var DWRITE_FONT_WEIGHT_EXTRA_BLACK = 950;
var DWRITE_FONT_WEIGHT_ULTRA_BLACK = 950;

var DWRITE_FONT_STYLE_NORMAL = 0;
var DWRITE_FONT_STYLE_OBLIQUE = 1;
var DWRITE_FONT_STYLE_ITALIC = 2;

var DWRITE_FONT_STRETCH_ULTRA_CONDENSED = 1;
var DWRITE_FONT_STRETCH_EXTRA_CONDENSED = 2;
var DWRITE_FONT_STRETCH_CONDENSED = 3;
var DWRITE_FONT_STRETCH_SEMI_CONDENSED = 4;
var DWRITE_FONT_STRETCH_NORMAL = 5;
var DWRITE_FONT_STRETCH_MEDIUM = 5;
var DWRITE_FONT_STRETCH_SEMI_EXPANDED = 6;
var DWRITE_FONT_STRETCH_EXPANDED = 7;
var DWRITE_FONT_STRETCH_EXTRA_EXPANDED = 8;
var DWRITE_FONT_STRETCH_ULTRA_EXPANDED = 9;

var DWRITE_TEXT_ALIGNMENT_LEADING = 0;
var DWRITE_TEXT_ALIGNMENT_TRAILING = 1;
var DWRITE_TEXT_ALIGNMENT_CENTER = 2;
var DWRITE_TEXT_ALIGNMENT_JUSTIFIED = 3;

var DWRITE_PARAGRAPH_ALIGNMENT_NEAR = 0;
var DWRITE_PARAGRAPH_ALIGNMENT_FAR = 1;
var DWRITE_PARAGRAPH_ALIGNMENT_CENTER = 2;

var DWRITE_WORD_WRAPPING_WRAP = 0;
var DWRITE_WORD_WRAPPING_NO_WRAP = 1;
var DWRITE_WORD_WRAPPING_EMERGENCY_BREAK = 2;
var DWRITE_WORD_WRAPPING_WHOLE_WORD = 3;
var DWRITE_WORD_WRAPPING_CHARACTER = 4;

var DWRITE_TRIMMING_GRANULARITY_NONE = 0;
var DWRITE_TRIMMING_GRANULARITY_CHARACTER = 1;
var DWRITE_TRIMMING_GRANULARITY_WORD = 2;

var D2D1_FIGURE_BEGIN_FILLED = 0;
var D2D1_FIGURE_BEGIN_HOLLOW = 1;

var D2D1_FIGURE_END_OPEN = 0;
var D2D1_FIGURE_END_CLOSED = 1;

var D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE = 0;
var D2D1_SWEEP_DIRECTION_CLOCKWISE = 1;

var D2D1_ARC_SIZE_SMALL = 0;
var D2D1_ARC_SIZE_LARGE = 1;

var WICBitmapTransformRotate0 = 0;
var WICBitmapTransformRotate90 = 1;
var WICBitmapTransformRotate180 = 2;
var WICBitmapTransformRotate270 = 3;
var WICBitmapTransformFlipHorizontal = 8;
var WICBitmapTransformFlipVertical = 16;

var MB_OK = 0;
var MB_OKCANCEL = 1;
var MB_ABORTRETRYIGNORE = 2;
var MB_YESNOCANCEL = 3;
var MB_YESNO = 4;

var MB_ICONHAND = 16;
var MB_ICONQUESTION = 32;
var MB_ICONEXCLAMATION = 48;
var MB_ICONASTERISK = 64;

var IDOK = 1;
var IDCANCEL = 2;
var IDABORT = 3;
var IDRETRY = 4;
var IDIGNORE = 5;
var IDYES = 6;
var IDNO = 7;

var MF_SEPARATOR = 0x00000800;
var MF_ENABLED = 0x00000000;
var MF_GRAYED = 0x00000001;
var MF_DISABLED = 0x00000002;
var MF_UNCHECKED = 0x00000000;
var MF_CHECKED = 0x00000008;
var MF_STRING = 0x00000000;
var MF_MENUBARBREAK = 0x00000020;
var MF_MENUBREAK = 0x00000040;
// var MF_BITMAP; // do not use
// var MF_OWNERDRAW // do not use
// var MF_POPUP // do not use

var TPM_LEFTALIGN = 0x0000;
var TPM_CENTERALIGN = 0x0004;
var TPM_RIGHTALIGN = 0x0008;
var TPM_TOPALIGN = 0x0000;
var TPM_VCENTERALIGN = 0x0010;
var TPM_BOTTOMALIGN = 0x0020;
var TPM_HORIZONTAL = 0x0000;
var TPM_VERTICAL = 0x0040;
var TPM_HORPOSANIMATION = 0x0400;
var TPM_HORNEGANIMATION = 0x0800;
var TPM_VERPOSANIMATION = 0x1000;
var TPM_VERNEGANIMATION = 0x2000;
var TPM_NOANIMATION = 0x4000;

var MK_LBUTTON = 0x0001;
var MK_RBUTTON = 0x0002;
var MK_SHIFT = 0x0004;
var MK_CONTROL = 0x0008;
var MK_MBUTTON = 0x0010;
var MK_XBUTTON1 = 0x0020;
var MK_XBUTTON2 = 0x0040;

var IDC_ARROW = 32512;
var IDC_IBEAM = 32513;
var IDC_WAIT = 32514;
var IDC_CROSS = 32515;
var IDC_UPARROW = 32516;
var IDC_SIZE = 32640;
var IDC_ICON = 32641;
var IDC_SIZENWSE = 32642;
var IDC_SIZENESW = 32643;
var IDC_SIZEWE = 32644;
var IDC_SIZENS = 32645;
var IDC_SIZEALL = 32646;
var IDC_NO = 32648;
var IDC_APPSTARTING = 32650;
var IDC_HAND = 32649;
var IDC_HELP = 32651;

var FILE_ATTRIBUTE_READONLY = 0x00000001;
var FILE_ATTRIBUTE_HIDDEN = 0x00000002;
var FILE_ATTRIBUTE_SYSTEM = 0x00000004;
var FILE_ATTRIBUTE_DIRECTORY = 0x00000010;
var FILE_ATTRIBUTE_ARCHIVE = 0x00000020;
var FILE_ATTRIBUTE_NORMAL = 0x00000080;
var FILE_ATTRIBUTE_TEMPORARY = 0x00000100;
var FILE_ATTRIBUTE_SPARSE_FILE = 0x00000200;
var FILE_ATTRIBUTE_REPARSE_POINT = 0x00000400;
var FILE_ATTRIBUTE_COMPRESSED = 0x00000800;
var FILE_ATTRIBUTE_OFFLINE = 0x00001000;
var FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 0x00002000;
var FILE_ATTRIBUTE_ENCRYPTED = 0x00004000;
// var FILE_ATTRIBUTE_DEVICE // do not use
// var FILE_ATTRIBUTE_VIRTUAL // do not use

var VK_F1 = 0x70;
var VK_F2 = 0x71;
var VK_F3 = 0x72;
var VK_F4 = 0x73;
var VK_F5 = 0x74;
var VK_F6 = 0x75;
var VK_BACK = 0x08;
var VK_TAB = 0x09;
var VK_RETURN = 0x0D;
var VK_SHIFT = 0x10;
var VK_CONTROL = 0x11;
var VK_ALT = 0x12;
var VK_ESCAPE = 0x1B;
var VK_PGUP = 0x21;
var VK_PGDN = 0x22;
var VK_END = 0x23;
var VK_HOME = 0x24;
var VK_LEFT = 0x25;
var VK_UP = 0x26;
var VK_RIGHT = 0x27;
var VK_DOWN = 0x28;
var VK_INSERT = 0x2D;
var VK_DELETE = 0x2E;
var VK_SPACEBAR = 0x20;

var UINT_MAX = Math.pow(2, 32) - 1;
var DPI = window.DPI;

var AlbumArtId = {
	front : 0,
	back : 1,
	disc : 2,
	icon : 3,
	artist : 4,
};

var ColourTypeCUI = {
	text : 0,
	selection_text : 1,
	inactive_selection_text : 2,
	background : 3,
	selection_background : 4,
	inactive_selection_background : 5,
	active_item_frame : 6,
};

var ColourTypeDUI = {
	text : 0,
	background : 1,
	highlight : 2,
	selection : 3,
};

var FontTypeCUI = {
	items : 0,
	labels : 1,
};

var FontTypeDUI = {
	defaults : 0,
	tabs : 1,
	lists : 2,
	playlists : 3,
	statusbar : 4,
	console : 5,
};

var PlaylistLockFilterMask = {
	filter_add : 1,
	filter_remove : 2,
	filter_reorder : 4,
	filter_replace : 8,
	filter_rename : 16,
	filter_remove_playlist : 32,
};

var ReplaygainMode = {
	None : 0,
	Track : 1,
	Album : 2,
	Track_Album_By_Playback_Order : 3,
};

var PlaybackOrder = {
	Default : 0,
	Repeat_Playlist : 1,
	Repeat_Track : 2,
	Random : 3,
	Shuffle_tracks : 4,
	Shuffle_albums : 5,
	Shuffle_folders : 6,
};

var PlaybackQueueOrigin = {
	user_added : 0,
	user_removed : 1,
	playback_advance : 2,
};

var PlaybackStartingCMD = {
	default : 0,
	play : 1,
	next : 2,
	prev : 3,
	settrack : 4,
	rand : 5,
	resume : 6,
};

var PlaybackStopReason = {
	user : 0,
	eof : 1,
	starting_another : 2,
};

var SelectionType = {
	undefined : 0,
	active_playlist_selection : 1,
	caller_active_playlist : 2,
	playlist_manager : 3,
	now_playing : 4,
	keyboard_shortcut_list : 5,
	media_library_viewer : 6,
};

var ImageEffect = {
	grayscale : 0,
	invert : 1,
	sepia : 2,
};

Number.prototype.calc_width = function (font_obj) {
	return utils.CalcTextWidth(this.toString(), font_obj.Name, font_obj.Size, font_obj.Weight || 400);
}

Number.prototype.calc_width2 = function (font) {
	return utils.CalcTextWidth2(this.toString(), font);
}

String.prototype.calc_width = function (font_obj) {
	if (this.empty()) return 0;
	return utils.CalcTextWidth(this, font_obj.Name, font_obj.Size, font_obj.Weight || 400);
}

String.prototype.calc_width2 = function (font) {
	if (this.empty()) return 0;
	return utils.CalcTextWidth2(this, font);
}

String.prototype.empty = function () {
	return this.length == 0;
}

String.prototype.repeat = function (num) {
	if (num >= 0 && num <= 5) {
		return new Array(Math.round(num) + 1).join(this);
	}
	return "";
}
